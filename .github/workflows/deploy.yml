name: CI/CD HTTP Deploy (Gradle)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build (Gradle)
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          OWNER_LC="${OWNER,,}"
          docker build -t ghcr.io/${OWNER_LC}/myapp:${GITHUB_SHA} .

      - name: Push image
        run: |
          OWNER_LC="${OWNER,,}"
          docker push ghcr.io/${OWNER_LC}/myapp:${GITHUB_SHA}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      # 0) AWS ÌÅ¨Î†àÎç¥ÏÖú Íµ¨ÏÑ±
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # üîπ AWS ÏûêÍ≤©Ï¶ùÎ™Ö ÌôïÏù∏
      - name: Verify AWS creds
        run: aws sts get-caller-identity

      # 1) AWS CLI v2 ÏÑ§Ïπò
      - name: Install AWS CLI v2
        run: |
          curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
          sudo apt-get update && sudo apt-get install -y unzip
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # 2) Îü¨ÎÑà Í≥µÏù∏ IP Ï°∞Ìöå
      - name: Get GitHub Actions public IP
        id: ip
        run: echo "ip=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_OUTPUT

      # 3) Î≥¥ÏïàÍ∑∏Î£π 22 ÏûÑÏãú Ïò§Ìîà
      - name: Open SSH port temporarily
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ip }}/32 \
            --region ${{ secrets.AWS_REGION }} \
          || echo "Rule already exists"

      # 4) SSHÎ°ú Î∞∞Ìè¨
      - name: SSH deploy (External 5999 -> Container 80)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            OWNER_LC="${OWNER,,}"
            IMAGE="ghcr.io/${OWNER_LC}/myapp:${IMAGE_TAG}"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker rm -f app || true
            docker pull "$IMAGE"
            docker run -d --name app --restart=always \
              --env-file /home/ubuntu/app/.env \
              -p 5999:80 \
              "$IMAGE"

            for i in {1..30}; do curl -fsS http://127.0.0.1:5999/ && ok=1 && break || sleep 2; done
            [ "$ok" = "1" ] || { echo "health failed"; docker logs app; exit 1; }

      # 5) Ìï≠ÏÉÅ Îã´Í∏∞ (ÏÑ±Í≥µ/Ïã§Ìå® Î¨¥Í¥Ä) + Î©±Îì± Ï≤òÎ¶¨
      - name: Close SSH port after deploy
        if: always()
        run: |
          CIDR="${{ steps.ip.outputs.ip }}/32"
          aws ec2 revoke-security-group-ingress \
            --group-id "${{ secrets.AWS_SECURITY_GROUP_ID }}" \
            --protocol tcp --port 22 --cidr "${CIDR}" \
            --region "${{ secrets.AWS_REGION }}" \
          || echo "Rule not found (already closed)"
