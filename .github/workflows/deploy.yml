name: CI/CD HTTP Deploy (Gradle)

on:
  push:
    branches: [ "main" ]

# GHCR 푸시/풀 + OIDC 토큰 발급 권한
permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build (Gradle)
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          OWNER_LC="${OWNER,,}"
          docker build -t ghcr.io/${OWNER_LC}/myapp:${GITHUB_SHA} .

      - name: Push image
        run: |
          OWNER_LC="${OWNER,,}"
          docker push ghcr.io/${OWNER_LC}/myapp:${GITHUB_SHA}

  deploy:
    needs: build-and-push
    runs-on: [self-hosted, ec2-prod]
    env:
      OWNER: ${{ github.repository_owner }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      # ▶ OIDC로 AWS 임시자격 구성 (필요시 AWS CLI 호출 가능)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to GHCR (on EC2)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull & Run container
        run: |
          set -e
          OWNER_LC="${OWNER,,}"
          IMAGE="ghcr.io/${OWNER_LC}/myapp:${IMAGE_TAG}"

          docker rm -f app || true
          docker pull "$IMAGE"
          docker run -d --name app --restart=always \
            --env-file /home/ubuntu/app/.env \
            -p 5999:5999 \
            "$IMAGE"

      - name: Health check
        run: |
          for i in {1..30}; do
            curl -fsS http://127.0.0.1:5999/ && ok=1 && break || sleep 2
          done
          [ "$ok" = "1" ] || { echo "health failed"; docker logs app; exit 1; }
